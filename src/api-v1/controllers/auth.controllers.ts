import {Request, Response} from 'express'
import bcrypt from 'bcrypt'
import {v4 as uid} from 'uuid'
import { User, UserRoles } from '../models/auth.models'
import { emailLoginSchema, registerSchema, usernameLoginSchema } from '../validators/auth.validators'
import { DbHelper } from '../databaseHelpers/index.helpers'
import { error } from 'console'


// instantiate the database helpers
const db = new DbHelper()

export async function registerUser (request:Request, response:Response){
    /*
    * This function aims to register new users into the system
    * the user id is auto-generated by uuid() module for maximum security
    * the admin role is added fist by default, other roles are selected by the user 
    * user input is validated and checked for errors using Joi before adding to the db
    * if no error present, using database helpers, user is added to the system
    * if an error is present the user will not be added to the database
    * a confirmation reponse is presented accordingly
    */

    const id=uid()
    // const role = UserRoles.Admin
    const {firstName, lastName,userName,email,contactNumber,password,role} = request.body
    const {error} = registerSchema.validate(request.body)
    try {
        if(error){
            // return response.status(400).send(error.details[0].message)
            return response.status(400).send(error.message)
        } else {
            const hashedPassword = await bcrypt.hash(password,9)
            await db.exec('addUser', {
                id,
                firstName,
                lastName,
                userName,
                email,
                contactNumber,
                password:hashedPassword,
                role
            })
            return response.status(200).send({message:'Congratulations! You have successfully created a new account'})
        }
    } catch(error){
        return response.status(400).send(error)
    }
}

export async function loginUser(request:Request, response:Response){
	/* this function aims to login existing users into the system
    * it requires the username or email and the respective users password
    * if exists, user is logged in
    * otherwise, a response is sent to the user to create a new account
    */

    const {emailOrUserName, password} = request.body
    const emailRegex = /^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,}$/

    // if emailOrUserName pattern matches an email
    try {
        if (emailRegex.test(emailOrUserName)){
            const {error} = emailLoginSchema.validate(request.body)
            if (error) {
                return response.status(400).send(error.message)
            } else {
                const user = (await db.exec('getUserByEmail',
                    {email:emailOrUserName})).recordset as Array<User>
                
                const isValidUser = await bcrypt.compare(password,user[0].password)
                if (isValidUser){
                    return response.status(200).send({message:'Welcome back [name]'})
                } else {
                    return response.status(400).send({message:'Oops! Seems like you entered an invalid password. Try again?'})
                }
            }
        // else if email regex doesnt match pattern i.e is a username
        } else if (!emailRegex.test(emailOrUserName)){
            const {error} = usernameLoginSchema.validate(request.body)
            if (error) {
                return response.status(400).send(error.message)
            } else {
                const user = (await db.exec('getUserByUserName',
                    {userName:emailOrUserName})).recordset as Array<User>

                const isValidUser = await bcrypt.compare(password, user[0].password)
                if (isValidUser){
                    console.log('inakwama after kuingia part 2')

                    return response.status(200).send({message:'Welcome back [name]'})
                } else {
                    return response.status(400).send({message:'Oops! Seems like you entered an incorrect password. Try again?'})
                }
            }
        }

    } catch(error){
        return response.status(400).send({message:'Oh no! It seems like the email/username you entered does not exist. Try again?'})
    }

}


// change password
// forgot password
// update user info
// delete user acc

// Admin roles
// get users by id
// get users by email